//3.1 3.2 3.3 .cpp
// MapElement

MapElement::MapElement(ElementType in_type) : type(in_type) {}

MapElement::~MapElement() {}

ElementType MapElement::getType() const {
    return type;
}

// Implementation of Path

Path::Path() : MapElement(PATH) {}

// Implementation of Wall

Wall::Wall() : MapElement(WALL) {}

// FakeWall

FakeWall::FakeWall(int in_req_exp) : MapElement(FAKE_WALL), req_exp(in_req_exp) {}

int FakeWall::getReqExp() const {
    int r = 0; 
    int c = 0; 
    int in_req_exp = (r * 257 + c * 139 + 89) % 900 + 1;
    return in_req_exp;
}

// Position

const Position Position::npos;

Position::Position(int r, int c) : r(r), c(c) {}

Position::Position(const string &str_pos) {
    stringstream ss(str_pos);
    char ch;
    ss >> ch >> r >> ch >> c >> ch;
}

int Position::getRow() const {
    return r;
}

int Position::getCol() const {
    return c;
}

void Position::setRow(int r) {
    this->r = r;
}

void Position::setCol(int c) {
    this->c = c;
}

string Position::str() const {
    stringstream ss;
    ss << "(" << r << "," << c << ")";
    return ss.str();
}

bool Position::isEqual(int in_r, int in_c) const {
    return (r == in_r && c == in_c);
}

// Map

Map::Map(int num_rows, int num_cols, int num_walls, Position *array_walls, int num_fake_walls, Position *array_fake_walls) : num_rows(num_rows), num_cols(num_cols) {
    map = new MapElement**[num_rows];
    for (int i = 0; i < num_rows; ++i) {
        map[i] = new MapElement*[num_cols];
        for (int j = 0; j < num_cols; ++j) {
            map[i][j] = new Path(); // Initialize Path 
        }
    }

    // Place walls on the map
    for (int i = 0; i < num_walls; ++i) {
        int row = array_walls[i].getRow();
        int col = array_walls[i].getCol();
        delete map[row][col]; // Delete existing element
        map[row][col] = new Wall();
    }

    // Place fake walls on the map
    for (int i = 0; i < num_fake_walls; ++i) {
        int row = array_fake_walls[i].getRow();
        int col = array_fake_walls[i].getCol();
        delete map[row][col]; // Delete existing element
        int req_exp = (row * 257 + col * 139 + 89) % 900 + 1;
        map[row][col] = new FakeWall(req_exp);
    }
}

Map::~Map() {
    for (int i = 0; i < num_rows; ++i) {
        for (int j = 0; j < num_cols; ++j) {
            delete map[i][j];
        }
        delete[] map[i];
    }
    delete[] map;
}